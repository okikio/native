class t{constructor(t){this.map=new Map(t)}getMap(){return this.map}get(t){return this.map.get(t)}keys(){return Array.from(this.map.keys())}values(){return Array.from(this.map.values())}set(t,e){return this.map.set(t,e),this}add(t){let e=this.size;return this.set(e,t),this}get size(){return this.map.size}get length(){return this.map.size}last(t=1){let e=this.keys()[this.size-t];return this.get(e)}delete(t){return this.map.delete(t)}remove(t){return this.map.delete(t),this}clear(){return this.map.clear(),this}has(t){return this.map.has(t)}entries(){return this.map.entries()}forEach(t,e){return this.map.forEach(t,e),this}[Symbol.iterator](){return this.entries()}}const e=({callback:t=(()=>{}),scope:e=null,name:s="event"})=>({callback:t,scope:e,name:s});class s extends t{constructor(t="event"){super(),this.name=t}}const r=t=>"object"==typeof t&&!Array.isArray(t)&&"function"!=typeof t;class i extends t{constructor(){super()}getEvent(t){let e=this.get(t);return e instanceof s?e:(this.set(t,new s(t)),this.get(t))}newListener(t,s,r){let i=this.getEvent(t);return i.add(e({name:t,callback:s,scope:r})),i}on(t,e,s){if(null==t||null==t)return this;"string"==typeof t&&(t=t.trim().split(/\s+/));let i,n,a=r(t),l=a?e:s;return a||(n=e),Object.keys(t).forEach((e=>{i=a?e:t[e],a&&(n=t[e]),this.newListener(i,n,l)}),this),this}removeListener(t,r,i){let n=this.get(t);if(n instanceof s&&r){let s=e({name:t,callback:r,scope:i});n.forEach(((t,e)=>{if(t.callback===s.callback&&t.scope===s.scope)return n.remove(e)}))}return n}off(t,e,s){if(null==t||null==t)return this;"string"==typeof t&&(t=t.trim().split(/\s+/));let i,n,a=r(t),l=a?e:s;return a||(n=e),Object.keys(t).forEach((e=>{i=a?e:t[e],a&&(n=t[e]),"function"==typeof n?this.removeListener(i,n,l):this.remove(i)}),this),this}once(t,e,s){if(null==t||null==t)return this;"string"==typeof t&&(t=t.trim().split(/\s+/));let i=r(t);return Object.keys(t).forEach((r=>{let n=i?r:t[r],a=i?t[r]:e,l=i?e:s,h=(...t)=>{a.apply(l,t),this.removeListener(n,h,l)};this.newListener(n,h,l)}),this),this}emit(t,...e){return null==t||null==t||("string"==typeof t&&(t=t.trim().split(/\s+/)),t.forEach((t=>{let r=this.get(t);r instanceof s&&r.forEach((t=>{let{callback:s,scope:r}=t;s.apply(r,e)}))}),this)),this}clear(){return((t,e,...s)=>{t.forEach((t=>{t[e](...s)}))})(this,"clear"),super.clear(),this}}export{s as Event,i as EventEmitter,i as default,r as isObject,e as newListener};
